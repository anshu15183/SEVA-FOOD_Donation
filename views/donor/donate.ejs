<main>
	<%- include('../partials/donorSidebar') %>

	<div id="main-wrapper">
		<div class="bg-white shadow-sm p-3">
			<span class="me-3" id="sidebar-toggler-btn"><i class="fas fa-bars"></i></span>
			<h5 class="m-0 color-theme d-inline-block">Donate</h5>
		</div>

		<form action="/donor/donate" method="POST" class="border m-4 my-3 p-4 bg-white rounded-2 shadow">
			<div class="mb-4">
				<label for="food" class="form-label">Food type</label>
				<input type="text" name="donation[foodType]" class="form-control" id="food" placeholder="Enter food.." required autofocus />
			</div>

			<div class="row">
				<div class="mb-4 col-sm-6">
					<label for="quantity" class="form-label">Quantity</label>
					<input type="text" name="donation[quantity]" class="form-control" id="quantity" placeholder="Enter quantity of food.." required />
				</div>

				<div class="mb-4 col-sm-6">
					<label for="time" class="form-label">Time of cooking</label>
					<input type="datetime-local" name="donation[cookingTime]" class="form-date-input" id="time" required />
				</div>
			</div>

			<div class="row">
				<div class="mb-4 col-sm-8">
					<label for="address" class="form-label">Address to collect</label>
					<input
						type="text"
						name="donation[address]"
						class="form-control"
						id="address"
						placeholder="Enter address.."
						value="<%= currentUser.address %>"
						required />
				</div>

				<div class="mb-4 col-sm-4">
					<label for="phone" class="form-label">Phone</label>
					<input
						type="number"
						name="donation[phone]"
						class="form-control"
						id="phone"
						placeholder="Enter phone.."
						value="<%= currentUser.phone %>"
						required />
				</div>
			</div>

			<div class="mb-4">
				<label for="msg" class="form-label">Want to write some message?</label>
				<textarea
					type="text"
					name="donation[donorToAdminMsg]"
					class="form-control"
					id="msg"
					placeholder="You can write here some msg.."></textarea>
			</div>

			<button type="submit" class="btn w-75 d-block m-auto mt-4">Submit</button>
		</form>

		<div id="map" style="height: 350px; margin-top: 20px"></div>
		<button id="my-location-btn" class="btn btn-primary mt-3" onclick="getUserLocation()">Use My Location</button>
	</div>
</main>

<!-- Google Maps JavaScript API -->
<!-- Google Maps JavaScript API -->
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDzqcfMIukONUBCBQa5GhWiBKuFqUJMgII&libraries=places" async></script>

<script>
	let map, marker, geocoder;

	function initMap() {
		// Initialize the map
		map = new google.maps.Map(document.getElementById("map"), {
			center: { lat: -34.397, lng: 150.644 }, // Default center, will be updated
			zoom: 15,
		});

		// Initialize geocoder
		geocoder = new google.maps.Geocoder();

		// Geolocation: Use user's current location
		if (navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(
				(position) => {
					const userLocation = {
						lat: position.coords.latitude,
						lng: position.coords.longitude,
					};

					// Center the map on the user's location
					map.setCenter(userLocation);
					map.setZoom(15);

					// Initialize marker at user's location
					marker = new google.maps.Marker({
						position: userLocation,
						map: map,
						draggable: true, // Enable dragging
						anchorPoint: new google.maps.Point(0, -29),
					});

					// Reverse geocode to get address
					geocoder.geocode({ location: userLocation }, (results, status) => {
						if (status === "OK" && results[0]) {
							document.getElementById("address").value = results[0].formatted_address;
						} else {
							alert("No address found for this location.");
						}
					});

					// Add listener for marker drag end
					google.maps.event.addListener(marker, "dragend", function (event) {
						const lat = event.latLng.lat();
						const lng = event.latLng.lng();

						// Update the address input when the marker is dropped
						geocoder.geocode({ location: { lat, lng } }, (results, status) => {
							if (status === "OK" && results[0]) {
								document.getElementById("address").value = results[0].formatted_address;
							} else {
								alert("No address found for this location.");
							}
						});
					});
				},
				() => {
					alert("Unable to retrieve your location.");
				}
			);
		} else {
			alert("Geolocation is not supported by your browser.");
		}

		// Set up autocomplete for the address input field
		const input = document.getElementById("address");
		const autocomplete = new google.maps.places.Autocomplete(input);
		autocomplete.bindTo("bounds", map);

		// Add a listener to handle address selection
		autocomplete.addListener("place_changed", () => {
			marker.setVisible(false);
			const place = autocomplete.getPlace();

			if (!place.geometry) {
				alert("No details available for this address.");
				return;
			}

			// Set map view to selected location
			if (place.geometry.viewport) {
				map.fitBounds(place.geometry.viewport);
			} else {
				map.setCenter(place.geometry.location);
				map.setZoom(17);
			}

			// Place marker at the selected location
			marker.setPosition(place.geometry.location);
			marker.setVisible(true);
		});

		// Add a click listener to the map to place the marker
		map.addListener("click", (event) => {
			marker.setPosition(event.latLng); // Move marker to clicked location
			geocoder.geocode({ location: event.latLng }, (results, status) => {
				if (status === "OK" && results[0]) {
					document.getElementById("address").value = results[0].formatted_address; // Update address input
				} else {
					alert("No address found for this location.");
				}
			});
		});
	}

	// Function to get user's location and update the map
	function getUserLocation() {
		if (navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(
				(position) => {
					const userLocation = {
						lat: position.coords.latitude,
						lng: position.coords.longitude,
					};

					// Center the map on the user's location
					map.setCenter(userLocation);
					map.setZoom(15);

					// Update marker position
					if (marker) {
						marker.setPosition(userLocation);
						marker.setVisible(true); // Make sure the marker is visible
					} else {
						// Initialize marker if not already created
						marker = new google.maps.Marker({
							position: userLocation,
							map: map,
							draggable: true, // Enable dragging
							anchorPoint: new google.maps.Point(0, -29),
						});

						// Add listener for marker drag end
						google.maps.event.addListener(marker, "dragend", function (event) {
							const lat = event.latLng.lat();
							const lng = event.latLng.lng();

							// Update the address input when the marker is dropped
							geocoder.geocode({ location: { lat, lng } }, (results, status) => {
								if (status === "OK" && results[0]) {
									document.getElementById("address").value = results[0].formatted_address;
								} else {
									alert("No address found for this location.");
								}
							});
						});
					}

					// Reverse geocode to get address
					geocoder.geocode({ location: userLocation }, (results, status) => {
						if (status === "OK" && results[0]) {
							document.getElementById("address").value = results[0].formatted_address;
						} else {
							alert("No address found for this location.");
						}
					});
				},
				() => {
					alert("Unable to retrieve your location.");
				}
			);
		} else {
			alert("Geolocation is not supported by your browser.");
		}
	}

	// Load the map when the page loads
	window.onload = initMap;

	// Pre-fill the datetime input with the current date and time
	const d = new Date();
	const dateString =
		d.getFullYear() +
		"-" +
		("0" + (d.getMonth() + 1)).slice(-2) +
		"-" +
		("0" + d.getDate()).slice(-2) +
		"T" +
		("0" + d.getHours()).slice(-2) +
		":" +
		("0" + d.getMinutes()).slice(-2);
	document.getElementById("time").value = dateString;
</script>

<style>
	/* General layout and typography */
	body,
	html {
		margin: 0;
		padding: 0;
		font-family: "Inter", sans-serif; /* Modern, clean font */
		background-color: #f9f9f9; /* Light background for a clean look */
	}

	/* Main wrapper for the content */
	#main-wrapper {
		margin-left: 260px;
		padding: 20px;
		background-color: #ffffff; /* White background for the form */
		min-height: 100vh;
	}

	/* Top Bar (with sidebar toggle button) */
	.bg-white {
		display: flex;
		align-items: center;
		justify-content: space-between;
		background-color: #ffffff;
		border-bottom: 1px solid #eaeaea;
		padding: 15px 20px;
	}

	#sidebar-toggler-btn {
		font-size: 24px;
		color: #4a4a4a;
		cursor: pointer;
	}

	.color-theme {
		color: #1a202c;
		font-weight: 600;
	}

	/* Form container styling */
	form {
		background-color: #fff;
		padding: 30px;
		border-radius: 10px;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05); /* Subtle shadow for depth */
		/*max-width: 800px;*/
		margin: 20px auto;
		display: flex;
		flex-direction: column;
	}

	/* Form labels and inputs */
	label.form-label {
		font-size: 14px;
		color: #333;
		font-weight: 500;
		margin-bottom: 8px;
		display: block;
	}

	input.form-control,
	textarea.form-control,
	input.form-date-input {
		width: 100%;
		padding: 10px 15px;
		font-size: 16px;
		color: #333;
		background-color: #f9f9f9; /* Light background for inputs */
		border: 1px solid #ccc;
		border-radius: 8px;
		transition: border-color 0.3s;
	}

	input.form-control:focus,
	textarea.form-control:focus,
	input.form-date-input:focus {
		border-color: #4a90e2; /* Highlight on focus */
		outline: none;
	}

	/* Button styling */
	button.btn {
		background-color: #4a90e2;
		color: white;
		border: none;
		padding: 12px 20px;
		border-radius: 8px;
		cursor: pointer;
		font-size: 16px;
		font-weight: 600;
		text-align: center;
		transition: background-color 0.3s ease;
	}

	button.btn:hover {
		background-color: #357abd; /* Darker blue on hover */
	}

	/* Responsiveness for form layout */
	@media (max-width: 768px) {
		#main-wrapper {
			margin-left: 0;
		}

		form {
			margin: 20px 10px;
		}
	}

	/* Map section */
	#map {
		height: 350px;
		margin-top: 30px;
		border-radius: 10px;
		box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* Subtle shadow for the map */
	}

	#my-location-btn {
		display: block;
		margin: 20px auto;
		background-color: #1abc9c;
		color: white;
		border: none;
		padding: 12px 20px;
		border-radius: 8px;
		font-size: 16px;
		font-weight: 600;
		text-align: center;
		cursor: pointer;
		transition: background-color 0.3s ease;
	}

	#my-location-btn:hover {
		background-color: #16a085; /* Darker green on hover */
	}
</style>
